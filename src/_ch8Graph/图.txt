1. 图的基本概念
	a) 图的定义
		G=(V,E)，V是顶点的有限集合，E是连接V中两个不同顶点的边的有限集合。
	b) 图的基本术语
		i) 端点和邻接点
		ii) 顶点的度（无向图）、入度和出度（有向图）
			e = 1/2 * ∑di (i=0 to n-1) （e为边数，n为顶点数，每个顶点的度为di）
		iii) 完全图
		iv) 稠密图和稀疏图
		v) 子图
			G=(V,E),G'=(V',E'),V'∈V,E'∈E，则G'为G的子图。（注意只满足V'∈V,E'∈E时，V',E'不一定构成图）
		vi) 路径和路径长度
			从顶点Vi到Vj的一条路径时一个顶点序列(Vi,Vi+1,Vi+2,...,Vj)，若此图为无向图则(Vk,Vk+1)∈E(G)(i<=k<j)，若为有向图则<Vk,Vk+1>∈E(G)(i<=k<j)。路径长度是指一条路径上经过的边的数目。若一条路径上除了开始点和结束点可以相同外，其余顶点均各不相同，则称此路径为简单路径。
		vii) 回路或环
			若一条路径上的开始点与结束点为同一个顶点，则称此路径为回路或环。开始点与结束点相同的简单路径称为简单回路或简单环。
		viii) 连通、连通图和连通分量
			在无向图G中，若从顶点i到顶点j有路径，则称顶点i和顶点j时连通的。若G中任意两个顶点都连通，则称G为连通图，否则称为非连通图。无向图G中的极大连通子图称为G的连通分量。
		ix) 连通、强连通图和强连通分量
			在有向图G中，若从顶点i到顶点j有路径，则称从顶点i到顶点j时连通的。若图G中任意两个顶点i和顶点j都连通，即从顶点i到顶点j和从顶点j到顶点i都存在路径，则称图G是强连通图。有向图G中的极大强连通子图称为G的强连通分量。
			(注：n个顶点的强连通图至少有n条边，呈环形)
		x) 关节点和重连通图
			加入在删除图G中顶点i以及与其相关联的各边后，图的一个连通分量被分割成两个或多个连通分量，则成顶点i为该图的关节点。一个没有关节点的连通图称为重连通图。
		xi) 权和网
			途中每一条边都可以附有一个对应的数值，这种与边相关的数值称为权。边上带有权的图称为带权图，也称作网。
2. 图的存储结构
	a) 邻接矩阵存储方法
		i) 不带权无向图：若(i,j)∈E(G)则A[i][j]=1；否则A[i][j]=0。（注意A[i][i]=0）
		ii) 不带权有向图：若<i,j>∈E(G)则A[i][j]=1；否则A[i][j]=0。（注意A[i][i]=0）
		iii) 带权无向图：若i!=j且(i,j)∈E(G)则A[i][j]=Wij；若i=j则A[i][j]=0；否则A[i][j]=∞。
		iv) 带权有向图：若i!=j且<i,j>∈E(G)则A[i][j]=Wij；若i=j则A[i][j]=0；否则A[i][j]=∞。
		v) 特点：表示是唯一的；适合于存储稠密图
		vi) 数据结构：
			class MGrapth{int n; int e; int[][] edges; VertexInfo[] vexs;}
	b) 邻接表存储方法
		i) 特点：表示不唯一；适合于稀疏图。
		ii) 数据结构：
			class GNode{VertexInfo data; List<GNode> neibs;}
	c) 邻接表和邻接矩阵的相互转化。[见：_ch8Graph.Graph]
3. 图的遍历
	a) 深度优先遍历DFS；[见：_ch8Graph.Through]
	b) 广度优先遍历BFS；[见：_ch8Graph.Through]
	c) 非连通图的遍历；[见：_ch8Graph.Through]
	d) 基于深度优先遍历算法的应用：
		i) 判断图G中从顶点u到v是否存在简单路径；
		ii) 求通过某顶点k的所有简单路径。
	e) 基于深度优先遍历算法的应用：
		i) 求不带权无向连通图G中顶点u到顶点v的最短路径；
		ii) 求不带权无向连通图G中距离顶点v最远的一个顶点。
4. 生成树和最小生成树
	a) 生成树概念：一个连通图的生成树是该连通图的一个绩效连通子图，它含有途中全部定点，但只有构成一棵树的(n-1)条边。
	b) 最小生成树生成准则：i)必须只是用该图中的边来构造；ii)必须使用且仅使用(n-1)条边来连接图中n个顶点；iii)不能使用产生回路的边。
	c) 普里姆算法：
		图G=(V,E)，T=(U,TE)是G的最小生成树，从起始顶点v出发构造最小生成树步骤如下：
		i) 初始化U={v}，以v到其他顶点的所有边为候选边；
		ii) 重复一下步骤(n-1)次，是的其它(n-1)个顶点被加入到U中：
			①从候选边中挑选权值最小的边加入TE，设该边在V-U中的顶点是k，将k加入U中；
			②考察当前V-U中的所有顶点j，修改候选边，若边(k,j)的全职小于原来和顶点j关联的候选边，则用边(k,j)取代后者作为候选边。
	d) 克鲁斯卡尔算法：
		i) 置U的初值为V(包含G中的全部顶点)，TE的初值为空集(即图T中每一个顶点都构成一个分量)。
		ii) 将图G中的边按权值从小到大依次选取，若选取的边未使生成树T形成回路，则加入TE，否则舍弃，知道TE中包含(n-1)条边为止。