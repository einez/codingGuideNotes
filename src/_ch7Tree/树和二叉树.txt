1. 树的基本概念
	1.1 定义：
		a) 递归定义：1) 当n=0--空树；2) 当n>0--root节点+m棵子树。
		b) 数据关系：每个元素有零个或多个后继节点，根节点无前驱结点，其余节点有且仅有一个前驱结点。
	1.2 逻辑表示方法：
		树形表示法；文氏图表示法；凹入表示法；括号表示法。
	1.3 基本术语：
		a) 节点的度：该节点子树的个数；树的度：树中各节点度的最大值；
		b) 分支节点（非终端节点）：度不为零的节点；叶子结点（终端节点）：度为零的节点；
		c) 路径与路经长度：若树中存在一个节点序列(Ki,Ki+1,...,Kj)使得除ki外任一节点kx都是Kx-1的后继节点，则称该节点序列(Ki,Ki+1,...,Kj)为Ki到Kj的一条路径。路径长度为经过的节点数减一，即j-i；
		d) 孩子节点、双亲节点、兄弟节点、祖先节点、子孙节点：对于树A(B(D,E),C)，B-C为A的孩子节点，D-E为B的孩子节点；A为B-C的双亲节点，B为D-E的双亲节点；B-C互为兄弟节点，D-E护卫兄弟节点；A-B为D的祖先节点；B-C-D-E为A的子孙节点；
		e) 节点的层次和树的高度：根节点为第一层，其余节点的层数为其双亲节点的层次加上一；树中节点的最大层次称为树的高度（或树的深度）；
		f) 有序树和无序树：根据树中各节点的子树是否有一定的左右次序分为有序树和无序树；
		g) 森林：n(n>0)个互不相交的树的集合称为森林。
	1.4 树的性质：
		a) 树中的节点数=所有节点的度数+1；
		b) 度为m的树中第i层上至多有m^(i-1)个节点(i>=1)；
		c) 高度为h的m次树至多有(m^h-1)/(m-1)个节点；
		d) 具有n个节点的m次树的最小高度为[logm(n(m-1)+1)](取上界);
	1.5 树的基本运算：
		a) 查找；
		b) 插入或删除；
		c) 遍历(先序遍历，中序遍历，后序遍历，层次遍历)。
	1.6 树的存储结构：
		a) 双亲存储结构：
			class Node{int data; int parent;}
		b) 孩子链存储结构：
			class Node{int data; List<Node> children;}
		c) 孩子兄弟链存储结构：
			class Node{int data; Node sibling; Node child;}
		例：以孩子兄弟链作为树的存储结构，编写一个求树的高度的递归算法。[见：_ch7Tree.HeightOfSiblingChildTree]
2. 二叉树的基本概念
	2.1 二叉树与度为2的树的区别：
		a) 度为2的树中至少有一个节点的度为2，而二叉树则没有这种要求；
		b) 度为2的树不区分左、右子树，而二叉树是严格区分左、右子树的。
	2.2 二叉树的性质：
		a) 非空二叉树上叶子结点数=双分支节点数+1；
		b) 非空二叉树上第i层上至多有2^(i-1)个节点(i>=1)；
		c) 高度为h的二叉树至多有2^h-1个节点(h>=1)；
		d) 对完全二叉树中编号为i的节点(1<=i<=n,n为节点数)有：
			I) 若2*i<=n，则i为分支节点，否则为叶子结点；
			II) 若n为奇数，则每个分支节点都兼具左右孩子节点；否则，最后一个分支节点只有左孩子节点，其余分支节点都有左右孩子节点；
			III) 若i有左孩子节点，则其编号为2*i；若i有右孩子节点，则其编号为2*i+1；
			IV) 编号为i(i>1)的节点双亲节点编号为i/2(计算机中的除法);
			V) 具有n个节点的完全二叉树的高度 h=[log2n]+1(取下界)=[log2(n+1)](取上界)。
	2.3 二叉树和森林、树的相互转换（略）。
3. 二叉树的存储结构
	顺序存储结构；链式存储结构。
4. 二叉树的基本运算
	a) 创建二叉树：BTNode createBTNode(String bracketTree)；
	b) 查找节点：BTNode findNode(BTNode root, int value)；
	c) 找孩子节点：BTNode getLChild(BTNode root), BTNode getRChild(BTNode root)；
	d) 求高度：int getHeight(BTNode root);
	e) 输出二叉树(括号表示法)：重写toString()。
	[见：_ch7Tree.Contract]
5. 二叉树的遍历
	a) 分类：先序遍历，中序遍历，后序遍历，层次遍历；
	b) 二叉树遍历递归算法；[见：_ch7Tree.RecursiveThrough]
	c) 二叉树遍历非递归算法；[见：_ch7Tree.NonRecursiveThrough]
	d) 层次遍历算法；[见：_ch7Tree.NonRecursiveThrough]
	*e) Morris遍历算法。
